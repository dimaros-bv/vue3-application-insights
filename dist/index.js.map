{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { ApplicationInsights, Snippet } from \"@microsoft/applicationinsights-web\";\r\nimport { generateW3CId } from \"@microsoft/applicationinsights-core-js\";\r\n\r\nimport { App, inject } from \"vue\";\r\nimport { Router } from \"vue-router\";\r\n\r\nexport interface AppInsightsPluginOptions {\r\n  appInsightsInstance?: ApplicationInsights;\r\n  appInsightsConfig?: Snippet;\r\n  connectionString?: string;\r\n  router?: Router;\r\n  appName?: string;\r\n  trackInitialPageView?: boolean;\r\n  trackAppErrors?: boolean;\r\n  onLoaded?: (appInsights: ApplicationInsights) => any;\r\n}\r\n\r\nconst injectKey = \"appInsights\";\r\n\r\nexport const AppInsightsPlugin = {\r\n  install: (app: App<Element>, options: AppInsightsPluginOptions) => {\r\n    // Create instance\r\n    let appInsights: ApplicationInsights | null = null;\r\n\r\n    // Use existing instance if provided\r\n    if (options.appInsightsInstance) {\r\n      appInsights = options.appInsightsInstance;\r\n    } else {\r\n      // Use provided settings or only connection string\r\n      const appInsightsConfig: Snippet = options.appInsightsConfig || {\r\n        config: {\r\n          connectionString: options.connectionString,\r\n        },\r\n      };\r\n\r\n      // Basic validation before init\r\n      if (\r\n        !appInsightsConfig.config.connectionString &&\r\n        !appInsightsConfig.config.instrumentationKey\r\n      ) {\r\n        console.warn(\r\n          \"[ApplicationInsights Plugin] Neither connectionString nor instrumentationKey is provided.\" +\r\n            \" ApplicationInsights won't be created.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      appInsights = new ApplicationInsights(appInsightsConfig);\r\n    }\r\n\r\n    // Inject AppInsights for later use\r\n    app.config.globalProperties.$appInsights = appInsights;\r\n    app.provide(injectKey, appInsights);\r\n\r\n    // Initial calls\r\n    appInsights.loadAppInsights();\r\n\r\n    // Watch route event if router option is defined.\r\n    if (options.router) {\r\n      if (options.trackInitialPageView) {\r\n        setupPageTracking(options, appInsights);\r\n      } else {\r\n        options.router.isReady().then(() => setupPageTracking(options, appInsights!));\r\n      }\r\n    }\r\n\r\n    // Track app errors automatically\r\n    if (options.trackAppErrors) {\r\n      const initialErrorHandler = app.config.errorHandler;\r\n\r\n      app.config.errorHandler = (err, instance, info) => {\r\n        if (initialErrorHandler) {\r\n          initialErrorHandler(err, instance, info);\r\n        }\r\n        appInsights?.trackException({ exception: err as Error }, { info });\r\n      };\r\n    }\r\n\r\n    if (options.onLoaded) {\r\n      options.onLoaded(appInsights);\r\n    }\r\n  },\r\n};\r\n\r\nfunction setupPageTracking(options: AppInsightsPluginOptions, appInsights: ApplicationInsights) {\r\n  const appName = options.appName ? `[${options.appName}] ` : \"\";\r\n\r\n  const pageName = (route: any) => `${appName}${route.name as string}`;\r\n\r\n  options.router!.beforeEach((route, _) => {\r\n    const name = pageName(route);\r\n    appInsights.context.telemetryTrace.traceID = generateW3CId();\r\n    appInsights.context.telemetryTrace.name = route.name as string;\r\n    appInsights.startTrackPage(name);\r\n  });\r\n\r\n  options.router!.afterEach((route) => {\r\n    const name = pageName(route);\r\n    const url = location.protocol + \"//\" + location.host + route.fullPath;\r\n    appInsights.stopTrackPage(name, url);\r\n  });\r\n}\r\n\r\nexport const useAppInsights = () => {\r\n  const appInsights = inject(injectKey) as ApplicationInsights;\r\n  return appInsights;\r\n};\r\n\r\nexport default AppInsightsPlugin;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA6C;AAC7C,yCAA8B;AAE9B,iBAA4B;AAc5B,IAAM,YAAY;AAEX,IAAM,oBAAoB;AAAA,EAC/B,SAAS,CAAC,KAAmB,YAAsC;AAEjE,QAAI,cAA0C;AAG9C,QAAI,QAAQ,qBAAqB;AAC/B,oBAAc,QAAQ;AAAA,IACxB,OAAO;AAEL,YAAM,oBAA6B,QAAQ,qBAAqB;AAAA,QAC9D,QAAQ;AAAA,UACN,kBAAkB,QAAQ;AAAA,QAC5B;AAAA,MACF;AAGA,UACE,CAAC,kBAAkB,OAAO,oBAC1B,CAAC,kBAAkB,OAAO,oBAC1B;AACA,gBAAQ;AAAA,UACN;AAAA,QAEF;AACA;AAAA,MACF;AAEA,oBAAc,IAAI,mDAAoB,iBAAiB;AAAA,IACzD;AAGA,QAAI,OAAO,iBAAiB,eAAe;AAC3C,QAAI,QAAQ,WAAW,WAAW;AAGlC,gBAAY,gBAAgB;AAG5B,QAAI,QAAQ,QAAQ;AAClB,UAAI,QAAQ,sBAAsB;AAChC,0BAAkB,SAAS,WAAW;AAAA,MACxC,OAAO;AACL,gBAAQ,OAAO,QAAQ,EAAE,KAAK,MAAM,kBAAkB,SAAS,WAAY,CAAC;AAAA,MAC9E;AAAA,IACF;AAGA,QAAI,QAAQ,gBAAgB;AAC1B,YAAM,sBAAsB,IAAI,OAAO;AAEvC,UAAI,OAAO,eAAe,CAAC,KAAK,UAAU,SAAS;AACjD,YAAI,qBAAqB;AACvB,8BAAoB,KAAK,UAAU,IAAI;AAAA,QACzC;AACA,mDAAa,eAAe,EAAE,WAAW,IAAa,GAAG,EAAE,KAAK;AAAA,MAClE;AAAA,IACF;AAEA,QAAI,QAAQ,UAAU;AACpB,cAAQ,SAAS,WAAW;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,SAAS,kBAAkB,SAAmC,aAAkC;AAC9F,QAAM,UAAU,QAAQ,UAAU,IAAI,QAAQ,OAAO,OAAO;AAE5D,QAAM,WAAW,CAAC,UAAe,GAAG,OAAO,GAAG,MAAM,IAAc;AAElE,UAAQ,OAAQ,WAAW,CAAC,OAAO,MAAM;AACvC,UAAM,OAAO,SAAS,KAAK;AAC3B,gBAAY,QAAQ,eAAe,cAAU,kDAAc;AAC3D,gBAAY,QAAQ,eAAe,OAAO,MAAM;AAChD,gBAAY,eAAe,IAAI;AAAA,EACjC,CAAC;AAED,UAAQ,OAAQ,UAAU,CAAC,UAAU;AACnC,UAAM,OAAO,SAAS,KAAK;AAC3B,UAAM,MAAM,SAAS,WAAW,OAAO,SAAS,OAAO,MAAM;AAC7D,gBAAY,cAAc,MAAM,GAAG;AAAA,EACrC,CAAC;AACH;AAEO,IAAM,iBAAiB,MAAM;AAClC,QAAM,kBAAc,mBAAO,SAAS;AACpC,SAAO;AACT;AAEA,IAAO,cAAQ;","names":[]}