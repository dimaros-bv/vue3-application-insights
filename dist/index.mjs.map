{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { ApplicationInsights, Snippet } from \"@microsoft/applicationinsights-web\";\r\nimport { ITelemetryItem, generateW3CId } from \"@microsoft/applicationinsights-core-js\";\r\n\r\nimport { App, InjectionKey, inject } from \"vue\";\r\nimport { Router } from \"vue-router\";\r\n\r\nexport interface AppInsightsPluginOptions {\r\n  appInsightsInstance?: ApplicationInsights;\r\n  appInsightsConfig?: Snippet;\r\n  connectionString?: string;\r\n  router?: Router;\r\n  appName?: string;\r\n  trackInitialPageView?: boolean;\r\n  trackAppErrors?: boolean;\r\n  cloudRole?: string;\r\n  cloudRoleInstance?: string;\r\n  onLoaded?: (appInsights: ApplicationInsights) => void;\r\n}\r\n\r\nconst injectKey: InjectionKey<ApplicationInsights | null> = Symbol(\"appInsights\");\r\n\r\nconst logPrefix = \"[ApplicationInsights Plugin]\";\r\n\r\n/**\r\n * Validates the options provided to init plugin.\r\n * @param options Application Insight plugin options.\r\n * @returns True if options is valid, otherwise false.\r\n */\r\nfunction isOptionsValid(options: AppInsightsPluginOptions): boolean {\r\n  const initOptions = [\r\n    options.appInsightsInstance,\r\n    options.appInsightsConfig,\r\n    options.connectionString,\r\n  ];\r\n\r\n  // Validate init options\r\n  const providedInitOptions = initOptions.filter((config) => !!config).length;\r\n  if (providedInitOptions === 0) {\r\n    console.warn(\r\n      logPrefix +\r\n        \" One of the options should be provided: appInsightsInstance, appInsightsConfig, connectionString.\" +\r\n        \" ApplicationInsights won't be created.\"\r\n    );\r\n    return false;\r\n  }\r\n\r\n  // Too many init options, just log misconfiguration warning.\r\n  if (providedInitOptions > 1) {\r\n    console.warn(\r\n      logPrefix +\r\n        \" Too many config values provided to init application insights.\" +\r\n        \" The order of usage is: appInsightsInstance, appInsightsConfig, connectionString.\"\r\n    );\r\n  }\r\n\r\n  // Init via config but no instrumentation key or connection string\r\n  if (\r\n    options.appInsightsConfig &&\r\n    !options.appInsightsConfig.config?.connectionString &&\r\n    !options.appInsightsConfig.config?.instrumentationKey\r\n  ) {\r\n    console.warn(\r\n      logPrefix +\r\n        \" Neither connectionString nor instrumentationKey is provided in appInsightsConfig.config.\" +\r\n        \" ApplicationInsights won't be created.\"\r\n    );\r\n\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Creates application insights based on provided options.\r\n * @param options Application Insights plugin options.\r\n * @returns ApplicationInsights instance.\r\n */\r\nfunction createApplicationInsights(options: AppInsightsPluginOptions): ApplicationInsights {\r\n  if (options.appInsightsInstance) {\r\n    return options.appInsightsInstance;\r\n  }\r\n\r\n  const appInsightsConfig: Snippet = options.appInsightsConfig ?? {\r\n    config: {\r\n      connectionString: options.connectionString,\r\n    },\r\n  };\r\n\r\n  return new ApplicationInsights(appInsightsConfig);\r\n}\r\n\r\n/**\r\n * Setup page tracking if router option is defined.\r\n * @param appInsights ApplicationInsights instance.\r\n * @param options Application insights plugin options.\r\n */\r\nfunction configurePageTrackingWithRouter(\r\n  appInsights: ApplicationInsights,\r\n  options: AppInsightsPluginOptions\r\n): void {\r\n  if (!options.router) {\r\n    return;\r\n  }\r\n\r\n  if (options.trackInitialPageView) {\r\n    setupPageTracking(appInsights, options);\r\n  } else {\r\n    options.router.isReady().then(() => setupPageTracking(appInsights, options));\r\n  }\r\n}\r\n\r\n/**\r\n * Setup app errors tracking.\r\n * @param app App.\r\n * @param appInsights ApplicationInsights instance.\r\n * @param options Application insights plugin options.\r\n */\r\nfunction configureAppErrorsTracking(\r\n  app: App<Element>,\r\n  appInsights: ApplicationInsights,\r\n  options: AppInsightsPluginOptions\r\n): void {\r\n  // Track app errors automatically\r\n  if (options.trackAppErrors) {\r\n    const initialErrorHandler = app.config.errorHandler;\r\n\r\n    app.config.errorHandler = (err, instance, info) => {\r\n      if (initialErrorHandler) {\r\n        initialErrorHandler(err, instance, info);\r\n      }\r\n      appInsights?.trackException({ exception: err as Error }, { info });\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Setup page tracking using router.\r\n * @param appInsights ApplicationInsights instance.\r\n * @param options Application insights plugin options.\r\n */\r\nfunction setupPageTracking(appInsights: ApplicationInsights, options: AppInsightsPluginOptions) {\r\n  const appName = options.appName ? `[${options.appName}] ` : \"\";\r\n\r\n  const pageName = (route: any) => `${appName}${route.name as string}`;\r\n\r\n  options.router!.beforeEach((route, _) => {\r\n    const name = pageName(route);\r\n    appInsights.context.telemetryTrace.traceID = generateW3CId();\r\n    appInsights.context.telemetryTrace.name = route.name as string;\r\n    appInsights.startTrackPage(name);\r\n  });\r\n\r\n  options.router!.afterEach((route) => {\r\n    const name = pageName(route);\r\n    const url = location.protocol + \"//\" + location.host + route.fullPath;\r\n    appInsights.stopTrackPage(name, url);\r\n  });\r\n}\r\n\r\n/**\r\n * Configure cloud role and instance for Azure application map.\r\n * @param appInsights ApplicationInsights instance.\r\n * @param options Application insights plugin options.\r\n */\r\nfunction configureCloudRole(\r\n  appInsights: ApplicationInsights,\r\n  options: AppInsightsPluginOptions\r\n): void {\r\n  if (options.cloudRole || options.cloudRoleInstance) {\r\n    appInsights.addTelemetryInitializer((envelope: ITelemetryItem) => {\r\n      envelope.tags ??= [];\r\n      if (options.cloudRole) {\r\n        envelope.tags[\"ai.cloud.role\"] = options.cloudRole;\r\n      }\r\n      if (options.cloudRoleInstance) {\r\n        envelope.tags[\"ai.cloud.roleInstance\"] = options.cloudRoleInstance;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport const AppInsightsPlugin = {\r\n  install: (app: App<Element>, options: AppInsightsPluginOptions) => {\r\n    if (!isOptionsValid(options)) {\r\n      return;\r\n    }\r\n\r\n    const appInsights = createApplicationInsights(options);\r\n\r\n    // Inject AppInsights for later use\r\n    app.config.globalProperties.$appInsights = appInsights;\r\n    app.provide(injectKey, appInsights);\r\n\r\n    // Initial calls\r\n    appInsights.loadAppInsights();\r\n\r\n    configurePageTrackingWithRouter(appInsights, options);\r\n    configureAppErrorsTracking(app, appInsights, options);\r\n    configureCloudRole(appInsights, options);\r\n\r\n    if (options.onLoaded) {\r\n      options.onLoaded(appInsights);\r\n    }\r\n  },\r\n};\r\n\r\nexport const useAppInsights = () => {\r\n  const appInsights = inject(injectKey) as ApplicationInsights;\r\n  return appInsights;\r\n};\r\n\r\nexport default AppInsightsPlugin;\r\n"],"mappings":"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","names":[]}